// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function(require) {
    var BinaryWriter, BlobBuilder, URL, requestFileSystem;
    requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;
    BlobBuilder = window.WebKitBlobBuilder || window.MozBlobBuilder;
    URL = window.URL || window.webkitURL;
    return BinaryWriter = (function() {

      function BinaryWriter(estimatedSize) {
        this.writeInteger = __bind(this.writeInteger, this);

        this.writeString = __bind(this.writeString, this);

        this.writeInt32 = __bind(this.writeInt32, this);

        this.writeUInt32 = __bind(this.writeUInt32, this);

        this.writeInt16 = __bind(this.writeInt16, this);

        this.writeUInt16 = __bind(this.writeUInt16, this);

        this.writeInt8 = __bind(this.writeInt8, this);

        this.writeUInt8 = __bind(this.writeUInt8, this);
        this.estimatedSize = estimatedSize;
        this.pos = 0;
        this.data = new Uint8Array(estimatedSize);
        this.masks = [0x0, 0xFF + 1, 0xFFFF + 1, 0xFFFFFF + 1, 0xFFFFFFFF + 1];
      }

      BinaryWriter.prototype.writeUInt8 = function(value, bigEndian) {
        return this.writeInteger(value, 1, bigEndian);
      };

      BinaryWriter.prototype.writeInt8 = function(value, bigEndian) {
        return this.writeInteger(value, 1, bigEndian);
      };

      BinaryWriter.prototype.writeUInt16 = function(value, bigEndian) {
        return this.writeInteger(value, 2, bigEndian);
      };

      BinaryWriter.prototype.writeInt16 = function(value, bigEndian) {
        return this.writeInteger(value, 2, bigEndian);
      };

      BinaryWriter.prototype.writeUInt32 = function(value, bigEndian) {
        return this.writeInteger(value, 4, bigEndian);
      };

      BinaryWriter.prototype.writeInt32 = function(value, bigEndian) {
        return this.writeInteger(value, 4, bigEndian);
      };

      BinaryWriter.prototype.writeString = function(value) {
        var i, _results;
        i = 0;
        i = 0;
        _results = [];
        while (i < value.length) {
          this.data[this.pos++] = value.charCodeAt(i);
          _results.push(++i);
        }
        return _results;
      };

      BinaryWriter.prototype.writeInteger = function(value, size, bigEndian) {
        var i, r, _results;
        r = value;
        i = 0;
        if (value < 0) {
          r += this.masks[size];
        }
        i = 0;
        _results = [];
        while (i < size) {
          if (bigEndian === true) {
            this.data[this.pos++] = (r >> ((size - i - 1) * 8)) & 0xFF;
          } else {
            this.data[this.pos++] = (r >> (i * 8)) & 0xFF;
          }
          _results.push(++i);
        }
        return _results;
      };

      return BinaryWriter;

    })();
  });

}).call(this);
