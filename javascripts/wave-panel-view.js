// Generated by CoffeeScript 1.3.3
(function() {

  define(function(require) {
    var WavePanelView, wavePanel_tpl, wavesurfer;
    wavesurfer = require('./lib/wave/wavesurfer');
    wavePanel_tpl = require('hbs!./wave-panel');
    return WavePanelView = Backbone.View.extend({
      className: 'audio-editor',
      events: {
        'mousedown canvas': 'mousedownCanvas'
      },
      mousedownCanvas: function(event) {
        var $target,
          _this = this;
        $target = $(event.target);
        $target.data({
          originalPosition: {
            x: event.clientX,
            y: event.clientY
          }
        });
        $('body').bind('mousemove.draggingOnCanvas', function(event) {
          return _this.draggingOnCanvas(event);
        });
        return $('body').on('mouseup.mouseupOnCanvas', function(event) {
          _this.selectionDrop();
          $('body').unbind('mousemove.draggingOnCanvas');
          return $('body').unbind('mouseup.mouseupOnCanvas');
        });
      },
      draggingOnCanvas: function(event) {
        var deltaX, left, originalPosition;
        originalPosition = this.$('canvas').data('originalPosition');
        deltaX = event.clientX - originalPosition.x;
        if (!deltaX) {
          return;
        }
        if (deltaX > 0) {
          left = originalPosition.x - this.$el.offset().left;
        } else {
          left = originalPosition.x - this.$el.offset().left + deltaX;
        }
        this.audioHandler.css({
          'width': Math.abs(deltaX),
          'left': left
        });
        return this.selectionChanged();
      },
      selectionChanged: function() {
        var from, left, to, width;
        left = parseFloat(this.audioHandler.css('left'));
        width = this.audioHandler.outerWidth();
        from = left / this.canvasWidth;
        to = (left + width) / this.canvasWidth;
        return wavesurfer.setSelection(from, to);
      },
      selectionDrop: function() {
        var from, left;
        left = parseFloat(this.audioHandler.css('left'));
        from = left / this.canvasWidth;
        return wavesurfer.playAt(from);
      },
      exportAudio: function() {
        return wavesurfer["export"]();
      },
      playPause: function() {
        return wavesurfer.playPause();
      },
      updatePlaying: function(percentage) {
        return this.$('.playing-pointer').css('left', "" + (percentage * 100) + "%");
      },
      initialize: function(options) {
        var _this = this;
        this.$el.append(wavePanel_tpl());
        wavesurfer.init({
          canvas: this.$('canvas')[0],
          width: options.width,
          height: options.height,
          color: options.color
        });
        wavesurfer.bind('playing', function(currentPercents) {
          return _this.updatePlaying.apply(_this, arguments);
        });
        this.audioHandler = this.$('.audio-handler');
        this.canvasWidth = options.width;
        return this.audioHandler.draggable({
          containment: 'parent',
          axis: "x",
          drag: function() {
            return _this.selectionChanged.apply(_this, arguments);
          },
          stop: function() {
            return _this.selectionDrop.apply(_this, arguments);
          }
        }).resizable({
          containment: "parent",
          handles: "e, w",
          resize: function() {
            return _this.selectionChanged.apply(_this, arguments);
          },
          stop: function() {
            return _this.selectionDrop.apply(_this, arguments);
          }
        });
      },
      loadFile: function(file) {
        var _dfr,
          _this = this;
        this.$el.addClass('loading');
        console.time('loadFile');
        _dfr = wavesurfer.loadFile(file);
        return _dfr.done(function() {
          console.timeEnd('loadFile');
          return _this.$el.removeClass('loading');
        });
      }
    });
  });

}).call(this);
