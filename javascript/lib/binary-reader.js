// Generated by CoffeeScript 1.3.3
(function() {

  define(function(require) {
    var BinaryReader, BlobBuilder, URL, exports, requestFileSystem;
    requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;
    BlobBuilder = window.WebKitBlobBuilder || window.MozBlobBuilder;
    URL = window.URL || window.webkitURL;
    BinaryReader = (function() {

      function BinaryReader(data) {
        this.data = new Uint8Array(data);
        this.pos = 0;
        this.signMasks = [0x0, 0x80, 0x8000, 0x800000, 0x80000000];
        this.masks = [0x0, 0xFF + 1, 0xFFFF + 1, 0xFFFFFF + 1, 0xFFFFFFFF + 1];
      }

      BinaryReader.prototype.gotoString = function(value) {
        var complete, i, j, _results;
        i = this.pos;
        _results = [];
        while (i < this.data.length) {
          if (value[0] === String.fromCharCode(this.data[i])) {
            complete = true;
            j = i;
            while (j < value.length + i) {
              if (value[j - i] !== String.fromCharCode(this.data[j])) {
                complete = false;
                break;
              }
              ++j;
            }
            if (complete === true) {
              this.pos = i;
              break;
            }
          }
          _results.push(++i);
        }
        return _results;
      };

      BinaryReader.prototype.readUInt8 = function(bigEndian) {
        return this.readInteger(1, false, bigEndian);
      };

      BinaryReader.prototype.readInt8 = function(bigEndian) {
        return this.readInteger(1, true, bigEndian);
      };

      BinaryReader.prototype.readUInt16 = function(bigEndian) {
        return this.readInteger(2, false, bigEndian);
      };

      BinaryReader.prototype.readInt16 = function(bigEndian) {
        return this.readInteger(2, true, bigEndian);
      };

      BinaryReader.prototype.readUInt32 = function(bigEndian) {
        return this.readInteger(4, false, bigEndian);
      };

      BinaryReader.prototype.readInt32 = function(bigEndian) {
        return this.readInteger(4, true, bigEndian);
      };

      BinaryReader.prototype.readString = function(size) {
        var i, r;
        r = "";
        i = 0;
        i = 0;
        while (i < size) {
          r += String.fromCharCode(this.data[this.pos++]);
          ++i;
        }
        return r;
      };

      BinaryReader.prototype.readInteger = function(size, signed, bigEndian) {
        var i, r;
        if (this.pos + (size - 1) >= this.data.length) {
          throw "Buffer overflow during reading.";
        }
        i = 0;
        r = 0;
        i = 0;
        while (i < size) {
          if (bigEndian === true) {
            r = this.data[this.pos++] + (r << (i * 8));
          } else {
            r += this.data[this.pos++] << (i * 8);
          }
          ++i;
        }
        if (signed && r & this.signMasks[size]) {
          r = r - this.masks[size];
        }
        return r;
      };

      BinaryReader.prototype.eof = function() {
        return this.data.length >= this.pos;
      };

      return BinaryReader;

    })();
    return exports = BinaryReader;
  });

}).call(this);
